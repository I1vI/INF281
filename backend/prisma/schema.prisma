generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuarios {
  id_usuario                  String                  @id @default(uuid())
  nombre                      String                  @db.VarChar(30)
  apellidopaterno             String                  @db.VarChar(30)
  apellidomaterno             String                  @db.VarChar(30)
  email                       String                  @unique @db.VarChar(50)
  contrasena                  String                  @db.VarChar(255)
  foto                        String                  @db.VarChar(255)
  telefono                    String                  @db.VarChar(20)
  pais                        String                  @db.VarChar(50)
  ciudad                      String                  @db.VarChar(50)
  genero                      String                  @db.VarChar(20)
  fechacreacion               DateTime                @default(now())
  ultimaactualizacion         DateTime                @updatedAt
  id_rol                      Int                     @default(1)
  verificado                  Boolean                 @default(false)
  expiracionTokenRecuperacion DateTime?
  tokenRecuperacion           String?                 @db.VarChar(100)
  puntaje                     Int                     @default(0)
  Agenda                      Agenda[]
  Historial_Actividades       Historial_Actividades[]
  Preferencias_Usuario        Preferencias_Usuario[]
  Roles                       Roles                   @relation(fields: [id_rol], references: [id_rol])
}

model Roles {
  id_rol          Int        @id @default(autoincrement())
  nombre          String     @unique @db.VarChar(50)
  descripcion_rol String     @db.VarChar(255)
  Permisos        Permisos[]
  Usuarios        Usuarios[]
}

model Permisos {
  id_permiso          Int    @id @default(autoincrement())
  id_rol              Int
  descripcion_permiso String @db.VarChar(255)
  accion              String @db.VarChar(50)
  objeto              String @db.VarChar(100)
  Roles               Roles  @relation(fields: [id_rol], references: [id_rol], onDelete: Cascade)

  @@unique([id_rol, objeto, accion])
}

model Preferencias_Usuario {
  id_preferencia Int      @id @default(autoincrement())
  id_usuario     String
  nombre         String   @db.VarChar(100)
  descripcion    String   @db.VarChar(255)
  tipo           String   @db.VarChar(50)
  Usuarios       Usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
}

model Historial_Actividades {
  id_historial    Int      @id @default(autoincrement())
  id_usuario      String
  fecha_actividad DateTime
  tipo_actividad  String   @db.VarChar(100)
  descripcion     String   @db.VarChar(1000)
  Usuarios        Usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
}

model Eventos {
  id_evento              Int                      @id @default(autoincrement())
  fecha                  DateTime
  descripcion            String                   @db.VarChar(1000)
  hora_fin               String                   @db.VarChar(50)
  hora_inicio            String                   @db.VarChar(50)
  modalidad              String                   @db.VarChar(50)
  titulo                 String                   @db.VarChar(255)
  foto_evento            String?                  @db.VarChar(255)
  costo                  Float
  puntuacion             Float                    @default(0)

  link_reunion           String?                  @db.VarChar(255)
  reunion_iniciada       Boolean                  @default(false)

  Agenda                 Agenda[]
  CategoriasEvento       Eventos_Categorias[]
  Eventos_Patrocinadores Eventos_Patrocinadores[]
  Expositores            Expositores[]
  Telefonos              Telefonos[]
  Ubicacion              Ubicacion?
}

model Expositores {
  id_expositor Int     @id @default(autoincrement())
  nombre       String  @db.VarChar(100)
  especialidad String  @db.VarChar(100)
  institucion  String  @db.VarChar(100)
  contacto     String  @db.VarChar(100)
  id_evento    Int
  Eventos      Eventos @relation(fields: [id_evento], references: [id_evento], onDelete: Cascade)
}

model Agenda {
  id_evento   Int
  id_usuario  String
  actividades String   @db.VarChar(255)
  fecha       DateTime
  comentario  String?
  calificacion   Int?   @default(-1)

  asistio       Boolean  @default(false)
  hora_ingreso  DateTime?
  
  Eventos     Eventos  @relation(fields: [id_evento], references: [id_evento], onDelete: Cascade)
  Usuarios    Usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)

  @@id([id_usuario, id_evento])
}

model Ubicacion {
  id_ubicacion Int     @id @default(autoincrement())
  descripcion  String  @db.VarChar(255)
  departamento String  @db.VarChar(100)
  id_evento    Int     @unique
  ubicacion    String  @db.VarChar(255)
  latitud      Float
  longitud     Float
  evento       Eventos @relation(fields: [id_evento], references: [id_evento], onDelete: Cascade)
}

model Telefonos {
  id_telefono Int     @id @default(autoincrement())
  id_evento   Int
  numero      String
  nombre      String
  evento      Eventos @relation(fields: [id_evento], references: [id_evento], onDelete: Cascade)
}

model Categorias {
  id_categoria Int                  @id @default(autoincrement())
  nombre       String               @unique
  descripcion  String?
  eventos      Eventos_Categorias[]
}

model Eventos_Categorias {
  id_evento_categoria Int        @id @default(autoincrement())
  id_evento           Int
  id_categoria        Int
  categoria           Categorias @relation(fields: [id_categoria], references: [id_categoria], onDelete: Cascade)
  evento              Eventos    @relation(fields: [id_evento], references: [id_evento], onDelete: Cascade)
}

model Patrocinadores {
  id_patrocinador        Int                      @id @default(autoincrement())
  razon_social           String                   @unique
  institucion            String                   @db.VarChar(255)
  Eventos_Patrocinadores Eventos_Patrocinadores[]
}

model Eventos_Patrocinadores {
  id_patrocina   Int            @id @default(autoincrement())
  id_evento      Int
  id_auspiciador Int
  Patrocinadores Patrocinadores @relation(fields: [id_auspiciador], references: [id_patrocinador], onDelete: Cascade)
  Eventos        Eventos        @relation(fields: [id_evento], references: [id_evento], onDelete: Cascade)
}
