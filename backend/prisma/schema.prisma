// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuarios {
  id_usuario          String   @id @default(uuid())
  nombre              String   @db.VarChar(30)
  apellidopaterno     String   @db.VarChar(30)
  apellidomaterno     String   @db.VarChar(30)
  email               String   @unique @db.VarChar(50)
  contrasena          String   @db.VarChar(255)
  foto                String   @db.VarChar(255)
  telefono            String   @db.VarChar(20)
  pais                String   @db.VarChar(50)
  ciudad              String   @db.VarChar(50)
  genero              String   @db.VarChar(20)
  fechacreacion       DateTime @default(now())
  ultimaactualizacion DateTime @updatedAt
  verificado         Boolean  @default(false)
  tokenRecuperacion   String?   @db.VarChar(100)
  expiracionTokenRecuperacion DateTime?

  id_rol              Int @default(1)
  Roles               Roles     @relation(fields: [id_rol], references: [id_rol])
  
  Preferencias_Usuario Preferencias_Usuario[]
  Historial_Actividades Historial_Actividades[]
  Agenda Agenda[]
}

model Roles {
  id_rol          Int       @id @default(autoincrement())
  nombre          String    @unique @db.VarChar(50)
  descripcion_rol String    @db.VarChar(255)
  Usuarios        Usuarios[]
  Permisos        Permisos[]
}

model Permisos {
  id_permiso          Int    @id @default(autoincrement())
  id_rol              Int
  objeto              String @db.VarChar(100)
  accion              String @db.VarChar(50)
  descripcion_permiso String @db.VarChar(255)

  Roles               Roles  @relation(fields: [id_rol], references: [id_rol], onDelete: Cascade)

  @@unique([id_rol, objeto, accion])
}

model Preferencias_Usuario {
  id_preferencia Int     @id @default(autoincrement())
  id_usuario     String
  nombre         String  @db.VarChar(100)
  descripcion    String  @db.VarChar(255)
  tipo           String  @db.VarChar(50)
  Usuarios       Usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
}

model Historial_Actividades {
  id_historial    Int     @id @default(autoincrement())
  id_usuario      String
  fecha_actividad DateTime
  tipo_actividad  String  @db.VarChar(100)
  descripcion     String  @db.VarChar(1000)
  Usuarios        Usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
}

model Eventos {
  id_evento      Int          @id @default(autoincrement())
  titulo         String       @db.VarChar(255)
  descripcion    String       @db.VarChar(1000)
  foto_evento    String?      @db.VarChar(255)
  hora_inicio    String       @db.VarChar(50)
  hora_fin       String       @db.VarChar(50)
  fecha          DateTime
  costo          Float
  modalidad      String       @db.VarChar(50)

  Ubicacion      Ubicacion?

  Expositores              Expositores[]
  Agenda                   Agenda[]
  Telefonos                Telefonos[]
  Eventos_Patrocinadores   Eventos_Patrocinadores[]
  CategoriasEvento         Eventos_Categorias[]
}





model Expositores {
  id_expositor Int @id @default(autoincrement())
  id_evento    Int
  nombre       String  @db.VarChar(100)
  especialidad String  @db.VarChar(100)
  institucion  String  @db.VarChar(100)
  contacto     String  @db.VarChar(100)
  
  Eventos      Eventos @relation(fields: [id_evento], references: [id_evento], onDelete: Cascade)
}




model Agenda {
  id_usuario String
  id_evento Int

  actividades String @db.VarChar(255)
  fecha DateTime
  Usuarios Usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  Eventos  Eventos  @relation(fields: [id_evento], references: [id_evento], onDelete: Cascade)

  @@id([id_usuario, id_evento])
}

model Ubicacion {
  id_ubicacion Int @id @default(autoincrement())
  id_evento    Int @unique
  descripcion  String @db.VarChar(255)
  ubicacion    String @db.VarChar(255)
  departamento String @db.VarChar(100)

  evento       Eventos @relation(fields: [id_evento], references: [id_evento], onDelete: Cascade)
}


model Telefonos {
  id_telefono Int     @id @default(autoincrement())
  id_evento   Int
  numero      String
  nombre      String

  evento      Eventos @relation(fields: [id_evento], references: [id_evento], onDelete: Cascade)
}



model Categorias {
  id_categoria Int     @id @default(autoincrement())
  nombre       String  @unique
  descripcion  String?
  
  eventos      Eventos_Categorias[]
}


model Eventos_Categorias {
  id_evento_categoria Int        @id @default(autoincrement())
  id_evento           Int
  id_categoria        Int

  evento              Eventos    @relation(fields: [id_evento], references: [id_evento], onDelete: Cascade)
  categoria           Categorias @relation(fields: [id_categoria], references: [id_categoria], onDelete: Cascade)
}


model Patrocinadores {
  id_patrocinador Int @id @default(autoincrement())
  razon_social String @unique
  institucion String @db.VarChar(255)
  Eventos_Patrocinadores Eventos_Patrocinadores[]
}


model Eventos_Patrocinadores {
  id_patrocina Int @id @default(autoincrement())
  id_evento Int
  id_auspiciador Int
  Eventos Eventos @relation(fields: [id_evento], references: [id_evento], onDelete: Cascade)
  Patrocinadores Patrocinadores @relation(fields: [id_auspiciador], references: [id_patrocinador], onDelete: Cascade)
}